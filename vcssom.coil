import {match_on, create_generator_runtime} from "./utils.coil"
import {VNode} from "./vnode.coil"

def Self() end
let self = Self[].freeze!()

def Self:prototype.at(name) = {type: :at, name, query: this:query}
def Self:prototype.set(name, value) = {type: :set, name, value, query: this:query}
def Self:prototype.delete!(name) = {type: :delete!, name, query: this:query}

let db = {
  rules: [
    {properties: {"flex-direction" => "row"}}
    {properties: {"flex-direction" => "column"}}
  ]
}

-- keys can be selector paths
let watchers = Map{}

let exec_cmd = match_on(:type){
  def :at({name}, {db, plugin})
    let path = str(plugin:query "-" name)
    if let list = watchers.at(path)
      list:add(plugin)
    else
      watchers:set(path, Set[plugin])
    end
    return db:rules.(plugin:query):properties.name
  end
  def :set({name, value}, {db, plugin, refresh})
    let path = str(plugin:query "-" name)
    db:rules.(plugin:query):properties.name = value
    watchers.at(path).each(refresh)
  end
  def :delete!({name}, {db, plugin, refresh})
    let path = str(plugin:query "-" name)
    db:rules.(plugin:query):properties.delete!(name)
    watchers.at(path).each(refresh)
  end
}

def render(plugin, {name, attrs, children}, run)
  let new_attrs = {...attrs}
  for [key val] of attrs.filter(|[_ val]| val instanceof ObjectLiteral)
    new_attrs.key = exec_cmd(val, {db, plugin, refresh: |plugin| refresh(plugin, run)})
  end

  let new_children = children.map(|vnode| {
    if type_of(vnode).pipe(Set["string" "number"])
      return vnode
    else
      return render(plugin, vnode, run)
    end
  }).into([])

  return VNode[name new_attrs new_children].log()
end
def refresh(plugin, run)
  if plugin:do
    run(plugin:do)
  end
  if let vnode = plugin:insert_after
    render(plugin, vnode, run)
  end
end

def init(plugin)
  let run = create_generator_runtime(|cmds, cmd| ({
    result: exec_cmd(cmd, {db, plugin, refresh: |plugin| refresh(plugin, run)})
    acc: [...cmds, cmd]
  }), [])
  refresh(plugin, run)
  return run
end

let plugin_a = {
  query: 0,
  insert_after: :div{
    class: "flex-direction-preview"
    "data-flex-direction" => self.at("flex-direction")
  }[:div{class: self.at("flex-direction")}]
}

let plugin_b = {
  query: 0,
  def* :do
    if self.at("flex-direction").yield != "blah"
      self.set("flex-direction", "blah").yield
    end
  end
}

[plugin_a plugin_b].each(init)

-- watchers.log()
-- db.log()
