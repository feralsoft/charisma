import {match_on, create_generator_runtime} from "./utils.coil"

def get(name) = {type: :get, name}
def set(name, value) = {type: :set, name, value}
def remove(name) = {type: :remove, name}

let db = {
  properties: {"flex-direction" => "row"}
}

-- keys can be selector paths
let watchers = Map{}

let exec_cmd = match_on(:type){
  def :get({name}, {db, generator})
    if let list = watchers.at(name)
      list:add(generator)
    else
      watchers:set(name, Set[generator])
    end
    return db:properties.name
  end
  def :set({name, value}, {db})
    db:properties.name = value
    watchers.at(name).each(run)
  end
  def :remove({name}, {db})
    db:properties.delete!(name)
    watchers.at(name).each(run)
  end
}

let current_scope = "[data-kind=rule]:nth-child(1)"

let run = create_generator_runtime(|cmds, cmd, generator| ({
  result: exec_cmd(cmd, {db, generator, scope: current_scope})
  acc: [...cmds, cmd]
}), [])

def* plugin_a
  let value = yield get("flex-direction")
  value.log("value:")
end

def* plugin_b
  yield set("flex-direction" "blah")
end

[plugin_a plugin_b].each(run)

watchers.log()
