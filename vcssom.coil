import {match_on, create_generator_runtime} from "./utils.coil"
import {VNode} from "./vnode.coil"

def Self() end
let self = Self[].freeze!()

def Self:prototype.at(name) = {type: :at, name, query: this:query}
def Self:prototype.set(name, value) = {type: :set, name, value, query: this:query}
def Self:prototype.delete!(name) = {type: :delete!, name, query: this:query}

let db = {
  rules: [
    {properties: {"flex-direction" => "row"}}
    {properties: {"flex-direction" => "column"}}
  ]
}

-- keys can be selector paths
let watchers = Map{}

let exec_cmd = match_on(:type){
  def :at({name}, {db, plugin})
    let path = str(plugin:query "-" name)
    if let list = watchers.at(path)
      list:add(plugin)
    else
      watchers:set(path, Set[plugin])
    end
    return db:rules.(plugin:query):properties.name
  end
  def :set({name, value}, {db, plugin, run})
    let path = str(plugin:query "-" name)
    db:rules.(plugin:query):properties.name = value
    watchers.at(path).each(run)
  end
  def :delete!({name}, {db, plugin, run})
    let path = str(plugin:query "-" name)
    db:rules.(plugin:query):properties.delete!(name)
    watchers.at(path).each(run)
  end
}

let known_method_names = [:do].freeze!()

def init(plugin)
  let methods = known_method_names.filter(plugin).into([])
  let run = create_generator_runtime(|cmds, cmd| ({
    result: exec_cmd(cmd, {
      db,
      plugin,
      run: |plugin| methods.each(|method| run(plugin.method))
    })
    acc: [...cmds, cmd]
  }), [])
  run(plugin:do)
  return run
end

let plugin_a = {
  query: 0,
  def* :do
    self.at("flex-direction").yield.log("value:")
  end
}

let plugin_b = {
  query: 0,
  def* :do
    if self.at("flex-direction").yield != "blah"
      self.set("flex-direction", "blah").yield
    end
  end
}

:div{class: "test"}["hey there"]
  .log()

[plugin_a plugin_b].each(init)

-- watchers.log()
-- db.log()
