import {match_on, create_generator_runtime} from "./utils.coil"

def get(name) = {type: :get, name}
def set(name, value) = {type: :set, name, value}
def remove(name) = {type: :remove, name, value}

let db = {
  properties: {"flex-direction" => "row"}
}

let watchers = Map{}

let exec_cmd = match_on(:type){
  def :get({name}, db, generator)
    if let list = watchers.at(generator)
      list:add(name)
    else
      watchers:set(generator, Set[name])
    end
    return db:properties.name
  end
  def :set({name, value}, db)
    db:properties.name = value
    watchers.filter(1 _.has?(name)).map(0).each(run)
  end
  def :remove({name}, db)
    db:properties.delete!(name)
    watchers.filter(1 _.has?(name)).map(0).each(run)
  end
}

let run = create_generator_runtime(|cmds, cmd, self| ({
  result: exec_cmd(cmd, db, self)
  acc: [...cmds, cmd]
}), [])

def* do_stuff
  let value = yield get("flex-direction")
  value.log("value:")
  if value != "column"
    yield set("flex-direction", "column")
  end
end

let cmds = run(do_stuff)

watchers.at(do_stuff).log()
