import "./html.coil"
import {parse_decl} from "./css-parser.coil"
import {to_html, compile, to_ast} from "./html-ast.coil"
import plugins from "./plugins"

document:styleSheets.0:rules.take(1).map(:cssText parse_decl 0).each(|css_ast_node| $(".editor"):append(to_html(css_ast_node)))

-- TODO: make a plugin to handle text input rerender the rule

def create_signal() = {
  abort_handlers: []
  def :destroy() = this:abort_handlers.each(|f| f())
  def :on_abort(cb) = this:abort_handlers:push(cb)
  def :listen(obj event_name cb)
    obj:addEventListener(event_name cb)
    this:on_abort(|| obj:removeEventListener(event_name cb))
  end
}

let configs = []

def init()
  configs.each(|conf| conf:signal:destroy())
  configs = []
  for [_name plugin] of Object:entries(plugins)
    let config = {
      signal: create_signal()
      def :rebuild()
        for [html_node idx] of $$("[data-kind=declaration]").zip(0..)
          let ast = html_node.to_ast()
          document:styleSheets.0:deleteRule(idx)
          document:styleSheets.0:insertRule(compile(ast) idx)
          init()
        end
      end
    }
    configs:push(config)
    plugin(config)
  end
end

init()