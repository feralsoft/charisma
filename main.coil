import "./html.coil"
import {parse_decl} from "./css-parser.coil"
import {to_html, compile, to_ast} from "./html-ast.coil"
import replace_numeric_with_slider from "./plugins/replace-numeric-with-slider.coil"
import highlight_elements_who_match_query from "./plugins/highlight-elements-who-match-query.coil"
import toggle_representation from "./plugins/toggle-representation.coil"

let rules = []
for rule of document:styleSheets.0:rules.take(1)
  rules:push(parse_decl(rule:cssText).0)
end

let queries = rules.map(|node| [compile(node:query) node]).into(Map{})

def find_decls_that_apply_to(node) = queries.filter(|[query _]| node:matches(query)).map(1).into([])

rules.each(|css_ast_node| $(".editor"):append(to_html(css_ast_node)))

-- TODO: make a plugin to handle text input rerender the rule
let plugins = [
  toggle_representation
  replace_numeric_with_slider
  highlight_elements_who_match_query
]

window:addEventListener("click" |e| {
  if e:altKey
    let node = find_decls_that_apply_to(e:target).each(|node| $(".editor"):append(to_html(node)))
  end
})

plugins.each(|plugin| plugin({
  queries: queries
  def :rebuild()
    for html_node of $$("[data-kind=declaration]")
      -- TODO: this is brittle as hell!
      document:styleSheets.0:deleteRule(0)
      document:styleSheets.0:insertRule(compile(html_node.to_ast()))
    end
  end
}))


