import "./html.coil"
import {parse_decl} from "./css-parser.coil"
import {to_html, compile, to_ast} from "./html-ast.coil"
import plugins from "./plugins"

document:styleSheets.0:rules.take(4).zip(0..).map(|[rule idx]| [parse_decl(rule:cssText).0, idx]).each(|[css_ast_node idx]| {
  let css_decl = to_html(css_ast_node)
  let root_path = "/Users/marcelrusu/Documents/Projects/css-edit/"
  let absolute_path = document:styleSheets.0:ownerNode:getAttribute("data-vite-dev-id")
  let relative_path = absolute_path:slice(root_path.len())

  css_decl:setAttribute("data-css-index", idx)
  css_decl:setAttribute("data-file-path", relative_path)
  -- TODO: compute line number by counting rules
  -- ^ this won't be so easy
  css_decl:prepend(:a{
    href: str("vscode://file" absolute_path),
    children: relative_path,
    class: "open-in-vscode"
  })
  $(".editor"):append(css_decl)
})

-- warn on unused query

def create_signal() = {
  abort_handlers: []
  id: crypto:randomUUID()
  def :destroy
    this:abort_handlers.each(|f| f())
    this:abort_handlers = []
  end
  def :on_abort(cb) = this:abort_handlers:push(cb)
  def :listen(obj event_name cb)
    obj:addEventListener(event_name cb)
    this:on_abort(|| obj:removeEventListener(event_name cb))
  end
}

let fetching = true

def init(root)
  for plugin of Object:values(plugins)
    let signal = create_signal()
    let config = {
      root: root
      signal: signal
      def :rebuild(new_root)
        config:eval_css(new_root)
        init(new_root or root)
      end
      async def :eval_css(new_root)
        let html_node = (new_root or root):closest("[data-kind=declaration]")
        let ast_node = html_node.to_ast()
        let idx = html_node:getAttribute("data-css-index").as_num()
        let [sheet] = document:styleSheets
        sheet:deleteRule(idx)
        sheet:insertRule(compile(ast_node) idx)
        if !fetching
          -- make sure
          fetching = true
          -- TODO: use a websocket, it'll be much faster
          await fetch("http://localhost:5173/update_css", {
            method: "POST",
            body: JSON:stringify({
              css: sheet:rules.map(:cssText).join("\n")
              file: sheet:ownerNode:getAttribute("data-vite-dev-id")
            })
          })
          fetching = false
        end
      end
    }
    plugin(config)
  end
end

init(document:body)
