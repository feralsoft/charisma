import "./html.coil"
import {parse_rule} from "./css-parser.coil"
import {run} from "./parse-utils.coil"
import {to_html, compile, to_ast} from "./html-ast.coil"
import plugins from "./plugins"
import "./search.coil"
-- import "./diff.coil"

document:styleSheets.0:rules.zip(0..).map(|[rule idx]| [parse_rule.run(rule:cssText).0, idx]).each(|[css_ast_node idx]| {
  let css_rule = to_html(css_ast_node)
  let root_path = "/Users/marcelrusu/Documents/Projects/css-edit/"
  let absolute_path = document:styleSheets.0:ownerNode:getAttribute("data-vite-dev-id")
  let relative_path = absolute_path:slice(root_path.len())

  css_rule:setAttribute("data-css-index", idx)
  css_rule:setAttribute("data-file-path", relative_path)
  css_rule:prepend(:a{
    href: str("vscode://file" absolute_path),
    children: relative_path,
    class: "open-in-vscode"
  })
  $(".--css-edit-editor"):append(css_rule)
})

-- warn on unused query
-- store active keys on editor elements with data attributes

def create_signal() = {
  abort_handlers: []
  id: crypto:randomUUID()
  def :destroy
    this:abort_handlers.each(|f| f())
    this:abort_handlers = []
  end
  def :on_abort(cb) = this:abort_handlers:push(cb)
  def :listen(obj event_name cb)
    obj:addEventListener(event_name cb)
    this:on_abort(|| obj:removeEventListener(event_name cb))
  end
}

def scope_helper(plugin_name) = {
  def :class(name) = str("plugin_" plugin_name "_" name)
  def :data(name) = str("data-plugin_" plugin_name "_" name)
  def :attr(name) = str("plugin_" plugin_name "_" name)
}

-- TODO: toggle this to turn on persisting
let fetching = true

protocol signals

def destroy_all_signals(root)
  root.signals.each(|signal| signal:destroy())
  root:children.each(destroy_all_signals)
end

def init(root)
  destroy_all_signals(root)
  root.signals = []

  for [plugin_name, plugin] of Object:entries(plugins)
    -- store signal on the root
    let signal = create_signal()
    root.signals:push(signal)
    let config = {
      root: root
      signal: signal
      scope: scope_helper(plugin_name)
      async def :rebuild(new_root)
        await config:eval_css(new_root)
        init(new_root or root)
      end
      async def :eval_css(new_root)
        new_root = new_root or root
        -- root might be .--css-edit-editor or <body>.. not sure if this is gonna cause issues later or not - it will :)
        let html_node = new_root:closest("[data-kind=rule][data-css-index]") or new_root.query("[data-kind=rule]")
        -- if what I've updated is just a value in a property (most the time)
        -- find the sheet & update the property directly instead of recompiling the entire rule!! this will be huge!
        if !html_node panic!("could not find nearest rule") end
        let ast_node = html_node.to_ast()
        let idx = html_node:getAttribute("data-css-index").as_num()
        let {sheet, attributes} = $("[data-vite-dev-id$=\"" html_node:getAttribute("data-file-path") "\"]")
        sheet:deleteRule(idx)
        sheet:insertRule(compile(ast_node) idx)
        -- TODO: pull this out into a function or something
        if !fetching
          fetching = true
          -- TODO: look into using a websocket
          await fetch("http://localhost:5173/update_css", {
            method: "POST",
            body: JSON:stringify({
              css: sheet:rules.map(:cssText).join("\n")
              file: attributes."data-vite-dev-id":value
            })
          })
          fetching = false
        end
      end
    }
    plugin(config)
  end
end

init(document:body)
