import {match_on} from "./utils.coil"

export let compile = match_on(:kind){
  def :child_selector({lhs rhs}) = str(compile_query_string(lhs) " " compile_query_string(rhs))
  def :class_selector({name}) = str("." name)
  def :selector_modifier({lhs rhs}) = str(compile(lhs) compile(rhs))
  -- TODO: handle no rules case
  def :declaration({query rules}) = str(compile(query) " {\n  " rules.map(compile).join(";\n  ") ";\n}")
  def :rule({name value}) = str(name ": " compile(value))
  def :variable({name value}) = str("--" name ": " compile(value))
  def :pct_value({value}) = str(value "%")
  def :vh_value({value}) = str(value "vh")
  def :vw_value({value}) = str(value "vw")
  def :px_value({value}) = str(value "px")
  def :pseudo_selector_without_args({name}) = str(":" name)
  def :pseudo_selector_with_args({name args}) = str(":" name "(" args.map(compile).join(", ") ")")
  def :pseudo_element_selector({name}) = str("::" name)
  def :selector_arg({arg}) = arg
  def :rgb_value({r g b}) = str("rgb(" r ", " g ", " b ")")
  def :rgba_value({r g b a}) = str("rgba(" r ", " g ", " b ", " a ")")
  def :plain_text_value({value}) = value
  def :rem_value({value}) = str(value "rem")
  def :em_value({value}) = str(value "em")
  def :attribute_selector_no_match({name}) = str("[" name "]")
  def :attribute_selector_equals({name value}) = str("[" name "=\"" value"\"]")
}

export def to_html(ast_node)
  let elem = :div{"data-kind" => ast_node:kind, "tabindex" => 0}
  for [key val] of ast_node.reject(0 Set["kind" "nid"])
    let attr_elem = :div{"data-attr" => key}
    if type_of(val) == "string"
      attr_elem:setAttribute("data-value" val)
      attr_elem:setAttribute("contenteditable", true)
      attr_elem:style:setProperty("--value" val)
      if Number(val).pipe(Number:isNaN !_)
        attr_elem:setAttribute("data-numeric", true)
      end
      attr_elem:append(val)
    else if val instanceof Array
      attr_elem:setAttribute("data-array" true)
      attr_elem:append(...val.map(to_html))
    else
      attr_elem:append(to_html(val))
    end
    elem:append(attr_elem)
  end
  return elem
end

export protocol to_ast

def Underscore:prototype.to_ast = this:insert(to_ast)

def HTMLElement:prototype.to_ast()
  if let kind = this:getAttribute("data-kind")
    let node = {kind: kind}
    for elem of this:children.filter(|elem| elem:hasAttribute("data-attr"))
      node.(elem:getAttribute("data-attr")) = elem.to_ast()
    end
    return node
  end
  if this:childElementCount == 0
    return this:textContent
  else if this:getAttribute("data-array") == "true"
    return this:children
      .filter(|elem| elem:hasAttribute("data-kind"))
      .map(|node| node.to_ast()).into([])
  else
    return this:children.0.to_ast()
  end
end
