import {match_on} from "./utils.coil"

export let compile = match_on(:kind){
  def :child_selector({lhs rhs}) = str(compile(lhs) " " compile(rhs))
  def :class_selector({name}) = str("." name)
  def :id_selector({name}) = str("#" name)
  def :selector_modifier({lhs rhs}) = str(compile(lhs) compile(rhs))
  def :rule({query properties self_sub_rule kind})
    if self_sub_rule
      if query:rhs and !query:lhs
        if kind != :direct_descendent
          panic!("ahhhh")
        end
        return str(compile(query:rhs) " {\n  " properties.map(compile).join(";\n  ") ";\n}")
      else
        return str("&" compile(query) " {\n  " properties.map(compile).join(";\n  ") ";\n}")
      end
    else
      return str(compile(query) " {\n  " properties.map(compile).join(";\n  ") ";\n}")
    end
  end
  def :self_query({value}) = str("&" compile(value))
  def :property({name expr}) = str(name ": " compile(expr))
  def :variable({name expr}) = str(name ": " compile(expr))
  def :var({name}) = str("var(" name ")")
  def :var_with_default({name, default_value}) = str("var(" name ", " default_value ")")
  def :pct({value}) = str(value "%")
  def :vh({value}) = str(value "vh")
  def :vw({value}) = str(value "vw")
  def :px({value}) = str(value "px")
  def :pseudo_selector_without_args({name}) = str(":" name)
  def :pseudo_selector_with_args({name args}) = str(":" name "(" args.map(compile).join(", ") ")")
  def :pseudo_element_selector({name}) = str("::" name)
  def :selector_arg({arg}) = arg
  def :rgb({r g b}) = str("rgb(" r ", " g ", " b ")")
  def :hex({r g b}) = str("#" r  g  b)
  def :hex_a({r g b a}) = str("#" r  g  b a)
  def :hex_short({r g b}) = str("#" r  g  b)
  def :rgba({r g b a}) = str("rgba(" r ", " g ", " b ", " a ")")
  def :plain_text({value}) = value
  def :rem({value}) = str(value "rem")
  def :em({value}) = str(value "em")
  def :calc({expr}) = str("calc(" compile(expr) ")")
  def :num({value}) = value
  def :multiply({lhs, rhs}) = str(compile(lhs) " * " compile(rhs))
  def :attribute_selector_no_match({name}) = str("[" name "]")
  def :attribute_selector_equals({name value}) = str("[" name "=\"" value "\"]")
  def :string({value}) = str("\"" value "\"")
  def :multi_part_value({parts}) = parts.map(compile).join(" ")
  def :direct_descendent({lhs, rhs})
    if lhs
      return str(compile(lhs) " > " compile(rhs))
    else
      -- not great... should be handled higher
      return str("> " compile(rhs))
    end
  end
  def :sibling_selector({lhs, rhs}) = str(compile(lhs) " ~ " compile(rhs))
  def :adjacent_sibling_selector({lhs, rhs}) = str(compile(lhs) " + " compile(rhs))
  def :or({lhs, rhs}) = str(compile(lhs) " , " compile(rhs))
  def :element_selector({name}) = name
  def :subtract({lhs, rhs}) = str(compile(lhs) " - " compile(rhs))
  def :attribute_selector_contains({name, value}) = str(name "*=\"" value "\"")
  def :nth_expr_with_plus({factor offset}) = str(factor "n+" offset)
  def :nth_expr_without_plus({factor}) = str(factor "n")
  def :keyframe({pct properties}) = str(pct "% {\n  " properties.map(compile).join(";\n  ") "\n}")
  def :keyframes({name frames}) = str("@keyframes" name "{\n  " frames.map(compile).join(";\n  ") "\n}")
}

export def to_html(ast_node)
  let elem = :div{"data-kind" => ast_node:kind, "tabindex" => 0}
  let attr_only_keys = []
  for [key val] of ast_node.reject(0 Set["kind" "nid"])
    if val.nil?()
      continue
    end if val:attr_only
      attr_only_keys:push(key)
      elem:setAttribute(str("data-" key), JSON:stringify(val:value))
      continue
    end
    let attr_elem = :div{"data-attr" => key}
    if type_of(val) == "string"
      let child = :div{
        "data-value" => val
        "data-numeric" => Number(val).pipe(Number:isNaN !_)
        contenteditable: true
        children: [val]
      }
      attr_elem:style:setProperty("--value" val)
      attr_elem:append(child)
    else if val instanceof Array
      attr_elem:setAttribute("data-array" true)
      attr_elem:append(...val.map(to_html))
    else if type_of(val) == "number"
      let child = :div{
        "data-value" => val
        "data-numeric" => true
        contenteditable: true
        children: val
      }
      attr_elem:style:setProperty("--value" val)
      attr_elem:append(val)
    else
      attr_elem:append(to_html(val))
    end
    elem:append(attr_elem)
  end
  elem:setAttribute("data-attr-only-keys", attr_only_keys.join(","))
  return elem
end

export protocol to_ast

def Underscore:prototype.to_ast = this:insert(to_ast)

def HTMLElement:prototype.to_ast()
  if let kind = this:getAttribute("data-kind")
    let node = {kind: kind.as_kw()}
    for elem of this.query_all(":scope > [data-attr]")
      node.(elem:getAttribute("data-attr")) = elem.to_ast()
    end
    for key of this:getAttribute("data-attr-only-keys"):split(",").reject(_.empty?())
      node.key = {
        attr_only: true,
        value: JSON:parse(this:getAttribute(str("data-" key)))
      }
    end

    return node
  else if this.query(":scope > [data-value]")
    return this:textContent
  else if this:getAttribute("data-array") == "true"
    return this.query_all(":scope > [data-kind]").map(_.to_ast()).into([])
  else
    return this:children.0.to_ast()
  end
end
