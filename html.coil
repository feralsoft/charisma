def Keyword:prototype.(Meta:create)(...children)
  let elem = document:createElement(this)
  elem:append(...children)
  return elem
end

def Keyword:prototype.(Meta:from_entries)(entries)
  entries = entries.into({})
  let elem = document:createElement(this)
  for [key val] of entries
      .reject(0 Set["children"])
      .reject(|[key _]| key:startsWith("on"))
    elem:setAttribute(key val)
  end
  for [event_name f] of entries
      .filter(|[key _]| key:startsWith("on"))
      .map(|[key f]| [key:split("on").1 f])
    elem:addEventListener(event_name f)
  end
  elem:append(...(entries:children or []))
  return elem
end

def window:$(...strs) = document:querySelector(str(...strs))
def window:$$(...strs) = document:querySelectorAll(str(...strs))
def str:kw(...args) = |obj|
  args.map(|arg| {
    if type_of(arg) == "string"
      return arg
    else
      return arg(obj)
    end
  })
  .join("")

protocol query
protocol query_all

window:query = query
window:query_all = query_all

def Object:prototype.query(...strs) = this:querySelector(str(...strs))
def Object:prototype.query_all(...strs) = this:querySelectorAll(str(...strs))
