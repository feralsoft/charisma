def Keyword:prototype.(Meta:create)(...children)
  let elem = document:createElement(this)
  elem:append(...children)
  return elem
end

def Keyword:prototype.(Meta:from_entries)(entries)
  entries = entries.into({})
  let children = entries:children or []
  let elem = document:createElement(this)
  for [key val] of entries:style
    elem:style:setProperty(key, val)
  end
  for [key val] of entries.delete!(:children :style).reject(|[key _]| key:startsWith("on"))
    elem:setAttribute(key val)
  end
  for [event_name f] of entries
      .filter(|[key _]| key:startsWith("on"))
      .map(|[key f]| [key:split("on").1 f])
    elem:addEventListener(event_name f)
  end
  elem:append(...children)
  return elem
end

def window:$(...strs) = document:querySelector(str(...strs))
def window:$$(...strs) = document:querySelectorAll(str(...strs))

protocol query
protocol query_all

window:query = query
window:query_all = query_all

def Node:prototype.query(...strs)
  let query_str = str(...strs)
  if this:matches(query_str)
    return this
  else
    return this:querySelector(query_str)
  end
end

def Node:prototype.query_all(...strs)
  let query_str = str(...strs)
  let results = this:querySelectorAll(query_str)
  if this:matches(query_str)
    let elem = this
    return {
      def* Symbol:iterator
        yield elem
        yield* results
      end
    }
  end
  return results
end
