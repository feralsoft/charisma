import "./size-preview.css"
import {to_ast, compile} from "../../html-ast.coil"
import {match_on} from "../../utils.coil"

let create_nodes = match_on(:kind){
  def :rem({value}) = [:div{
    class: "size-preview",
    style: {"--size" => str(value "rem")}
    "data-original-value" => value
  }]
  def :px({value}) = [:div{
    style: { "--size" => str(value "px") }
    class: "size-preview",
    "data-original-value" => value
  }]
  def :em({value}, get_query)
    let query = get_query()
    if query.has?("::")
      query.log("{[ignored]}")
      return []
    end
    let out = []
    for size of $$(get_query()).map(getComputedStyle :fontSize).reject(_.empty?()).into(Set[])
      out:push(:div{
        class: "size-preview",
        style: {"--size" => size, "--factor" => value}
        "data-original-value" => value
      })
    end

    return out
  end
}

let query = create_nodes.keys().map(str:fmt("[data-kind=\"" _ "\"]")).join(", ")

def size_preview({root})
  for sizeable of root.query_all(query)
    sizeable.query_all(".size-preview").each(|node| node:remove())
    sizeable:setAttribute("data-size-preview", true)
    let node = sizeable.to_ast()
    def get_query = sizeable:closest("[data-kind=rule][data-css-index]")
      .:querySelector("[data-attr=query] > [data-kind]")
      .to_ast()
      .pipe(compile)
    
    sizeable:append(...create_nodes(node, get_query))
  end
end

export default size_preview
