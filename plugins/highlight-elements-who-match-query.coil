def html_to_ast(html_node)
  if let kind = html_node:getAttribute("data-kind")
    let node = {kind: kind}
    for elem of html_node:children
      node.(elem:getAttribute("data-attr")) = html_to_ast(elem)
    end
    return node
  end
  if html_node:childElementCount == 0
    return html_node:textContent
  else if html_node:getAttribute("data-attr")
    return html_to_ast(html_node:children.0)
  end
end

def compile_query_string(node) = node.pipe(:kind {
  def :child_selector({lhs rhs}) = str(compile_query_string(lhs) " " compile_query_string(rhs))
  def :class_selector({name}) = str("." name)
})(node)

def highlight_elements_who_match_query(queries)
  for query_elem of $$("[data-kind=declaration] > [data-attr=query]")
    query_elem:addEventListener("mouseover" do |e|
      for elem of $$(query_elem.pipe(html_to_ast compile_query_string))
        elem:classList:add("css-query-hover")
      end
    end)
    query_elem:addEventListener("mouseleave" do |e|
      for elem of $$(query_elem.pipe(html_to_ast compile_query_string))
        elem:classList:remove("css-query-hover")
      end
    end)
  end
end

export default highlight_elements_who_match_query
