import {match_on} from "../../utils.coil"
import {to_ast, to_html, compile} from "../../html-ast.coil"
import {parse_value_step} from "../../css-parser.coil"
import {run} from "../../parse-utils.coil"

def parse_val(str) = parse_value_step.run(str).0

def rem_font_size() = getComputedStyle(document:documentElement)
  .:fontSize:split("px").0.pipe(parseInt)

def hex(s) = parseInt(s):toString(16):padStart(2 "0")
def from_hex(val) = parseInt(val 16)
def rem_to_px(val) = Number(val) * rem_font_size()
def px_to_rem(val) = Number(val) / rem_font_size()

let toggle_compile = match_on(:kind){
  def :rgb({r g b}) = str("#" hex(r) hex(g) hex(b))
  def :rgba({r g b a}) = str("#" hex(r) hex(g) hex(b) hex(a.as_num() * 100))
  def :hex({r g b}) = str("rgb(" from_hex(r) "," from_hex(g) "," from_hex(b) ")")
  def :hex_a({r g b a}) = str("rgba(" from_hex(r) "," from_hex(g) "," from_hex(b) ", " from_hex(a) / 100 ")")
  def :rem({value}) = str(rem_to_px(value) "px")
  def :px({value}) = str(px_to_rem(value) "rem")
  def :var({name} elem)
    let rule_name = elem:closest("[data-kind=rule]").log().query("[data-attr=name] [data-value]").log():innerText:trim().as_kw()
    rule_name.log()
    return elem:closest("[data-kind=decl]")
      .query("[data-attr=query]")
      .to_ast()
      .pipe(compile $$)
      .map(getComputedStyle rule_name)
      .:next():value
  end
}

let enabled_nodes_query = toggle_compile.keys()
  .map(|kind| str("[data-kind=" kind "]"))
  .pipe(str:fmt(":is(" _.join(", ") ")"))

def toggle_representation({signal, rebuild, root})
  for elem of root.query_all(enabled_nodes_query)
    signal:listen(elem "dblclick" |e| {
      e:stopPropagation()
      let node = elem.to_ast()
      let new_elem = toggle_compile(node, elem).pipe(parse_val to_html)
      elem:replaceWith(new_elem)
      rebuild(new_elem)
    })
  end
end

export default toggle_representation
