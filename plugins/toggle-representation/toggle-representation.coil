import {call_with} from "../../utils.coil"
import {to_ast to_html} from "../../html-ast.coil"
import {parse_value} from "../../css-parser.coil"

def parse_val(str) = parse_value([nil str]).0

def rem_font_size() = getComputedStyle(document:documentElement)
  .:fontSize:split("px").0.pipe(parseInt)

def hex(s) = parseInt(s):toString(16):padStart(2 "0")
def from_hex(val) = parseInt(val 16)
def rem_to_px(val) = Number(val) * rem_font_size()
def px_to_rem(val) = Number(val) / rem_font_size()

let toggle_compile = {
  def :rgb_value({r g b}) = str("#" hex(r) hex(g) hex(b))
  def :hex_value({r g b}) = str("rgb(" from_hex(r) "," from_hex(g) "," from_hex(b) ")")
  def :rem_value({value})= str(rem_to_px(value) "px")
  def :px_value({value})= str(px_to_rem(value) "rem")
}

let enabled_nodes_query = toggle_compile.keys()
  .map(|kind| str("[data-kind=" kind "]"))
  .join(", ")
  .pipe(str:kw(":is(" _ ")"))

def toggle_representation({signal, rebuild})
  for elem of $$("[data-kind]:has(> [data-value])" enabled_nodes_query)
    signal:listen(elem "dblclick" |e| {
      e:stopPropagation()
      let node = elem.to_ast()
      let new_elem = node.pipe(:kind call_with(node){...toggle_compile} parse_val to_html)
      elem:replaceWith(new_elem)
      rebuild()
    })
  end
end

export default toggle_representation