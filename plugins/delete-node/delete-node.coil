import {parse_rule, parse_value} from "../../css-parser.coil"
import {to_html} from "../../html-ast.coil"
import "./delete-node.css"

let context_map = {
  def :declaration(text) = parse_rule([nil text])
  def :variable(text) = parse_value([nil text])
  def :rule(text) = parse_value([nil text])
}

-- TODO: use a data attribute instead of this protocol so we can style it
protocol backspaced

-- bug: why does it take 4-6 delete keys to delete a css rule from an already deleted value

-- IDEA: undo via storing the AST as an persistent immutable map

-- How to namespace plugins on some level?
def delete_node({root, signal, rebuild})
  let interval = nil
  for node of root.query_all("[data-kind=declaration] > [data-attr=rules] *")
    signal:listen(node "keydown" |e| {
      e:stopPropagation()
      if e:key == "Backspace" if node.backspaced
        if node:parentNode:closest("[data-kind]"):dataset:kind == "declaration"
          node:remove()
          rebuild()
          return
        end
        let text_node = :div{
          class: "just-deleted-node"
          contenteditable: true
          "data-context" => node:parentNode:closest("[data-kind]"):dataset:kind
          def :onkeydown(e)
            if e:key == "Enter"
              let ast_node = context_map.(this:dataset:context)(this:innerText:trim()).0
                .log()
              this:replaceWith(to_html(ast_node))
              rebuild(root:closest("[data-kind=declaration]"))
            end
          end
        }
        node:replaceWith(text_node)
        text_node:focus()
        node.backspaced = false
        return
      end end
      if e:key == "Backspace"
        node.backspaced = true
        setTimeout(|| node.backspaced = false, 500)
      end
    })
  end
end

export default delete_node
