import {compile, to_ast, to_html} from "../../html-ast.coil"
import {match_on} from "../../utils.coil"

let increment_factor = {
  :em => 0.1
  :rem => 0.1
  :px => 1
}

def replace_numeric_with_slider({eval_css, signal, root})
  let original_value = nil
  let start_y = nil
  let active_elem = nil
  let factor = nil
  for elem of root.query_all("[data-numeric]")
    signal:listen(elem "mousedown" |e| {
      e:preventDefault()
      start_y = e:clientY
      active_elem = elem
      factor = elem:closest("[data-kind]"):dataset:kind.pipe(increment_factor) or 1
      original_value = elem:textContent.as_num()
    })
  end
  signal:listen(window "mousemove" |e| {
    if active_elem
      let new_value = original_value - ((e:clientY - start_y) * factor)
      new_value = Number(new_value:toFixed(5))
      active_elem:setAttribute("data-value" new_value)
      active_elem:replaceChildren(new_value)
      let expr_node = active_elem:closest("[data-attr=\"expr\"]")
      expr_node:style:setProperty("--raw-css", compile(expr_node.to_ast()))
      eval_css(active_elem)
    end
  })
  signal:listen(window "mouseup" |e| active_elem = nil)
end

export default replace_numeric_with_slider
