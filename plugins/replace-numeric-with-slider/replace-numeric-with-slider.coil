import {compile, to_ast, to_html} from "../../html-ast.coil"
import {match_on} from "../../utils.coil"

def replace_numeric_with_slider({rebuild, signal, root})
  let original_value = nil
  let start_y = nil
  let active_elem = nil
  let factor = nil
  def render_value(new_value)
    new_value = Number(new_value:toFixed(5))
    active_elem:setAttribute("data-value" new_value)
    active_elem:replaceChildren(new_value)
    let expr_node = active_elem:closest("[data-attr=\"expr\"]")
    expr_node:style:setProperty("--raw-css", compile(expr_node.query("[data-kind]").to_ast()))
    rebuild(expr_node)
  end
  for elem of root.query_all("[data-numeric=true]")
    let inc_factor = 1
    let [_ decimals] = elem:textContent:split(".")
    if decimals
      inc_factor = decimals.at(-1).as_num() / (10 ** decimals.len())
    end
    
    signal:listen(elem "keydown" |e| {
      if e:key == "ArrowUp"
        e:preventDefault()
        active_elem = elem
        render_value(elem:textContent.as_num() + inc_factor)
        active_elem = nil
      else if e:key == "ArrowDown"
        e:preventDefault()
        active_elem = elem
        render_value(elem:textContent.as_num() - inc_factor)
        active_elem = nil
      end
    })
    signal:listen(elem "mousedown" |e| {
      e:preventDefault()
      e:target:focus()
      start_y = e:clientY
      active_elem = elem
      factor = inc_factor
      original_value = elem:textContent.as_num()
    })
  end
  signal:listen(window "mousemove" |e| {
    if active_elem
      let new_value = original_value - ((e:clientY - start_y) * factor)
      render_value(new_value)
    end
  })
  signal:listen(window "mouseup" |e| active_elem = nil)
end

export default replace_numeric_with_slider
