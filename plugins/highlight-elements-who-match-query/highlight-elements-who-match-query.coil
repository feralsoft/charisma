import "./highlight-elements.css"
import {to_ast, compile, to_html} from "../../html-ast.coil"
import {parse_decl} from "../../css-parser.coil"

def highlight_elements_who_match_query({signal, root})
  signal:listen(window "click" |e| {
    if e:altKey
      document:styleSheets.0:rules
        .zip(0..)
        .filter(|[rule _]| e:target:matches(rule:selectorText))
        .reject(|[_ idx]| $("[data-css-index=\"" idx "\"]"))
        .each(|[rule idx]| {
          let html_node = to_html(parse_decl(rule:cssText).0)
          html_node:setAttribute("data-css-index", idx)
          $(".editor"):append(html_node)
          html_node:classList:add("newly-added")
          setTimeout(|| html_node:classList:remove("newly-added"), 1500)
        })
    end
  })

  for decl of root.query_all("[data-kind=declaration]")
    def exec_query = decl:querySelector("[data-attr=query]").to_ast().pipe(compile |query| $$(query))
    let entered = false
    signal:listen(decl "mouseenter" |e| entered = true)
    signal:listen(decl "mouseleave" |e| entered = false)
    signal:listen(window "keydown" |e| {
      if !e:ctrlKey or !entered return end
      exec_query().each(|elem| elem:classList:add("css-query-hover"))
    })
    signal:listen(window "keyup" |e| exec_query().each(|elem| elem:classList:remove("css-query-hover")))
  end
end

export default highlight_elements_who_match_query
