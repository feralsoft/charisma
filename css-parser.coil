import {test, capture!, chomp!, trimmed, trimmed!, trim, debug} from "./parse-utils.coil"

let digit_regex = /^[+-]?([0-9]*[.])?[0-9]+/

def* parse_class_selector
  yield chomp!(".")
  let name = yield capture!(/^(\w|-)+/)
  return {kind: :class_selector, name}
end

def* parse_id_selector
  yield chomp!("#")
  let name = yield capture!(/^(\w|-)+/)
  return {kind: :id_selector, name}
end

def* parse_selector_arg
  if yield test(/^\d+n/)
    let factor = yield capture!(/^(\d)+n/, 1)
    if yield trimmed(test("+"))
      yield trimmed!(chomp!("+"))
      let offset = yield capture!(/^\d+/)
      return {kind: :nth_expr_with_plus, factor, offset}
    else
      return {kind: :nth_expr_without_plus, factor}
    end
  else
    let skip_step = yield test(/(>|~| )/)
    return yield* parse_query(/^\s*(,|\))/, skip_step)
  end
end

def* parse_pseudo_selector_with_args
  yield chomp!(":")
  let name = yield capture!(/^(\w|-)+/)
  yield chomp!("(")
  let args = []
  while !yield test(")")
    args:push(yield* parse_selector_arg())
    if !yield trimmed(test(")"))
      yield trimmed!(chomp!(","))
    end
  end
  yield trimmed!(chomp!(")"))
  return {kind: :pseudo_selector_with_args, name, args}
end

def* parse_pseudo_selector_without_args
  yield chomp!(":")
  let name = yield capture!(/^(\w|-)+/)
  return {kind: :pseudo_selector_without_args, name}
end  

def* parse_pseudo_element_selector
  yield chomp!("::")
  let name = yield capture!(/^(\w|-)+/)
  return {kind: :pseudo_element_selector, name}
end

def* parse_attribute_selector_no_match
  yield chomp!("[")
  let name = yield capture!(/^(\w|-)+/)
  yield chomp!("]")
  return {kind: :attribute_selector_no_match, name}
end

def* parse_attribute_selector_equals
  yield chomp!("[")
  let name = yield capture!(/^(\w|-)+/)
  yield trimmed!(chomp!("="))
  yield chomp!("\"")
  let value = yield capture!(/^((?!").)+/)
  yield chomp!("\"")
  yield trimmed!(chomp!("]"))
  return {kind: :attribute_selector_equals, name, value}
end

def* parse_attribute_selector_contains
  yield chomp!("[")
  let name = yield capture!(/^(\w|-)+/)
  yield trimmed!(chomp!("*="))
  yield chomp!("\"")
  let value = yield capture!(/^((?!").)+/)
  yield chomp!("\"")
  yield trimmed!(chomp!("]"))
  return {kind: :attribute_selector_contains, name, value}
end

def* parse_element_selector
  let name = yield capture!(/^(\w|-)+/)
  return {kind: :element_selector, name}
end

def* parse_query_step
  if yield test("*")
    yield chomp!("*")
    return {kind: :wildcard}
  else if yield test(".")
    return yield* parse_class_selector()
  else if yield test("#")
    return yield* parse_id_selector()
  else if yield test("::")
    return yield* parse_pseudo_element_selector()
  else if yield test(/^(\w|-)+/)
    return yield* parse_element_selector()
  else if yield test(/^:(\w|-)+\(/)
    return yield* parse_pseudo_selector_with_args()
  else if yield test(":")
    return yield* parse_pseudo_selector_without_args()
  else if yield test(/^\[(\w|-)+=".*"\]/)
    return yield* parse_attribute_selector_equals()
  else if yield test(/^\[(\w|-)+\*=".*"\]/)
    return yield* parse_attribute_selector_contains()
  else if yield test(/^\[(\w|-)+\]/)
    return yield* parse_attribute_selector_no_match()
  else
    (yield debug()).log()
    panic!("parse fail")
  end
end

def* parse_query(end_pattern, skip_step)
  let query = nil
  -- this is a fucking mess, please unify this with self_sub_decl
  if yield trimmed(test("&"))
    yield trim()
    yield chomp!("&")
    query = {kind: :self_query, value: yield* parse_query_step()}
  else if !skip_step
    query = yield* parse_query_step()
  end
  while !yield test(end_pattern)
    let kind = nil
    if yield trimmed(test(">"))
      yield trimmed!(chomp!(">"))
      kind = :direct_descendent
    else if yield test(" ")
      yield trim()
      kind = :child_selector
    else if yield trimmed(test(","))
      yield trimmed!(chomp!(","))
      let rhs = yield* parse_query(end_pattern)
      return {kind: :or, lhs: query, rhs}
    else if yield trimmed(test("~"))
      yield trimmed!(chomp!("~"))
      kind = :sibling_selector
    else if yield trimmed(test("+"))
      yield trimmed!(chomp!("+"))
      kind = :adjacent_sibling_selector
    else
      kind = :selector_modifier
    end
    let rhs = yield* parse_query_step()
    query = {kind, lhs: query, rhs}
  end
  return query
end

def* parse_px_value
  let value = yield capture!(digit_regex)
  yield chomp!("px")
  return {kind: :px, value}
end

def* parse_vw_value
  let value = yield capture!(digit_regex)
  yield chomp!("vw")
  return {kind: :vw, value}
end

def* parse_vh_value
  let value = yield capture!(digit_regex)
  yield chomp!("vh")
  return {kind: :vh, value}
end

def* parse_pct_value
  let value = yield capture!(digit_regex)
  yield chomp!("%")
  return {kind: :pct, value}
end

def* parse_rgb_value
  yield chomp!("rgb")
  yield trimmed!(chomp!("("))
  let r = yield capture!(digit_regex)
  yield trimmed!(chomp!(","))
  let g = yield capture!(digit_regex)
  yield trimmed!(chomp!(","))
  let b = yield capture!(digit_regex)
  yield trimmed!(chomp!(")"))
  return {kind: :rgb, r, g, b}
end

def* parse_rgba_value
  yield chomp!("rgba")
  yield trimmed!(chomp!("("))
  let r = yield capture!(digit_regex)
  yield trimmed!(chomp!(","))
  let g = yield capture!(digit_regex)
  yield trimmed!(chomp!(","))
  let b = yield capture!(digit_regex)
  yield trimmed!(chomp!(","))
  let a = yield capture!(digit_regex)
  yield trimmed!(chomp!(")"))
  return {kind: :rgba, r, g, b, a}
end

let hex_part_regex = /^[a-fA-F0-9]{2}/
let hex_part_regex_1 = /^[a-fA-F0-9]{1}/

def* parse_hex_value
  yield chomp!("#")
  if yield test(/^[a-fA-F0-9]{3}\s*;/)
    let r = yield capture!(hex_part_regex_1)
    let g = yield capture!(hex_part_regex_1)
    let b = yield capture!(hex_part_regex_1)
    return {kind: :hex_short, r, g, b}
  else
    let r = yield capture!(hex_part_regex)
    let g = yield capture!(hex_part_regex)
    let b = yield capture!(hex_part_regex)
    if yield test(hex_part_regex)
      let a = yield capture!(hex_part_regex)
      return {kind: :hex_a, r, g, b, a}
    else
      return {kind: :hex, r, g, b}
    end
  end
end

def* parse_text_value
  let value = yield capture!(/^[^; ]+/)
  return {kind: :plain_text, value}
end

def* parse_rem_value
  let value = yield capture!(digit_regex)
  yield chomp!("rem")
  return {kind: :rem, value}
end

def* parse_em_value
  let value = yield capture!(digit_regex)
  yield chomp!("em")
  return {kind: :em, value}
end

def* parse_var_value
  yield chomp!("var")
  yield trimmed!(chomp!("("))
  let name = yield capture!(/^--(\w|-)+/)
  yield trimmed!(chomp!(")"))
  return {kind: :var, name}
end

def* parse_var_with_default_value
  yield chomp!("var")
  yield trimmed!(chomp!("("))
  let name = yield capture!(/^--(\w|-)+/)
  yield trimmed!(chomp!(","))
  let default_value = yield* parse_value()
  yield trimmed!(chomp!(")"))
  return {kind: :var_with_default, name, default_value}
end

def* parse_string_value
  let value = yield capture!(/^".*"/)
  return {kind: :string, value}
end

def* parse_value_step
  if yield test("rgba")
    return yield* parse_rgba_value()
  else if yield test("rgb")
    return yield* parse_rgb_value()
  else if yield test("#")
    return yield* parse_hex_value()
  else if yield test("\"")
    return yield* parse_string_value()
  else if yield test(digit_regex + /px/)
    return yield* parse_px_value()
  else if yield test(digit_regex + /vw/)
    return yield* parse_vw_value()
  else if yield test(digit_regex + /vh/)
    return yield* parse_vh_value()
  else if yield test(digit_regex + /rem/)
    return yield* parse_rem_value()
  else if yield test(digit_regex + /em/)
    return yield* parse_em_value()
  else if yield test(digit_regex + /%/)
    return yield* parse_pct_value()
  else if yield test(/^var\(--(\w|-)+\)/)
    return yield* parse_var_value()
  else if yield test("var")
    return yield* parse_var_with_default_value()
  else
    return yield* parse_text_value()
  end
end

export def* parse_value(rule_name)
  -- fonts can have spaces in them, but other values shouldn't
  if rule_name == "font-family"
    let value = yield capture!(/^((?!;).)*/)
    return {kind: :plain_text, value}
  end

  let parts = [yield* parse_value_step()]
  -- TODO ; or }
  while !yield trimmed(test(";"))
    yield trim()
    parts:push(yield* parse_value_step())
  end

  if parts.len() == 1
    return parts.0
  else
    return {kind: :multi_part_value, parts}
  end
end

export def* parse_rule
  let name = yield trimmed!(capture!(/^(\w|-)+/))
  yield trimmed!(chomp!(":"))
  let expr = yield* parse_value(name)
  yield trimmed!(chomp!(";"))
  return {kind: :rule, name, expr}
end

def* parse_variable
  let name = yield trimmed!(capture!(/^--(\w|-)+/))
  yield trimmed!(chomp!(":"))
  let expr = yield* parse_value()
  yield trimmed!(chomp!(";"))
  return {kind: :variable, name, expr}
end

def* parse_self_sub_decl
  yield chomp!("&")
  let skip_part = yield test(" ")
  let query = yield* parse_query(/^\s*{/, skip_part)
  yield trimmed!(chomp!("{"))
  let rules = []
  while !yield trimmed(test("}"))
    rules:push(yield* parse_statement())
  end
  yield trimmed!(chomp!("}"))
  return {
    kind: :decl,
    query,
    rules,
    self_sub_decl: {attr_only: true, value: true}
  }
end

def* parse_sub_decl
  let query = yield* parse_query(/^\s*{/)
  yield trimmed!(chomp!("{"))
  let rules = []
  while !yield trimmed(test("}"))
    rules:push(yield* parse_statement())
  end
  yield trimmed!(chomp!("}"))
  return {
    kind: :decl,
    query,
    rules,
    sub_decl: {attr_only: true, value: true}
  }
end

def* parse_statement
  if yield test("--")
    return yield* parse_variable()
  else if yield test("&")
    return yield* parse_self_sub_decl()
  else if yield test(/^(\w|-)+\s*:/)
    return yield* parse_rule()
  else
    return yield* parse_sub_decl()
  end
end

export def* parse_decl
  yield trim()
  let query = yield* parse_query(/^\s*{/)
  yield trimmed!(chomp!("{"))
  let rules = []
  while !yield trimmed(test("}"))
    rules:push(yield* parse_statement())
  end
  yield trimmed!(chomp!("}"))
  return {kind: :decl, query, rules}
end
